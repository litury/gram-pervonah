import { ICommentService } from './interfaces/ICommentService';
import { IUserBot } from '../UserBotModule/interfaces/IUserBot';
import { logger } from '../../utils/logger';
import { sleep } from '../../utils/helpers';
import { BOT_CONFIG } from '../../config/botConfig';

export class CommentService implements ICommentService {
  constructor(private userBot: IUserBot) {}

  async processPost(channel: string, post: any): Promise<void> {
    logger.info(`Processing post ${post.id} in channel ${channel}`);
    if (!post.groupedId) {
      logger.info(`Reacting to message ${post.id} in ${channel}`);
      await this.userBot.reactToPost(channel, post.id, 'üëç');
      
      const comment = this.generateComment();
      logger.info(`Attempting to comment on message ${post.id} in ${channel}`);
      const commentSuccess = await this.userBot.commentOnPost(channel, post.id, comment);

      if (commentSuccess) {
        logger.info(`Successfully commented on message ${post.id} in ${channel}`);
        await sleep(BOT_CONFIG.REACTION_TIMEOUT);
      } else {
        logger.warn(`Failed to comment on message ${post.id} in ${channel}.`);
      }
    } else {
      logger.info(`Skipping message ${post.id} in ${channel} as it's part of a media group`);
    }
  }

  generateComment(): string {
    const comments = [
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç!",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
      "–û—á–µ–Ω—å –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ!",
      "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è!",
      "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
      "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ!",
      "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –≤–∞—à–∏–º –ø–æ—Å—Ç–∞–º!",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ç—Ä—É–¥!",
      "–û—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞!",
      "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
    ];
    return comments[Math.floor(Math.random() * comments.length)];
  }
}